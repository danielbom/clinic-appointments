// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: secretaries_queries.sql

package infra

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countSecretaries = `-- name: CountSecretaries :one
SELECT COUNT(id)
FROM "secretaries"
WHERE true
  AND ($1::text = '' OR "name" ILIKE '%' || $1 || '%')
  AND ($2::text = '' OR "cpf" = $2)
  AND ($3::text = '' OR "phone" = $3)
`

type CountSecretariesParams struct {
	Column1 string
	Column2 string
	Column3 string
}

func (q *Queries) CountSecretaries(ctx context.Context, arg CountSecretariesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countSecretaries, arg.Column1, arg.Column2, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSecretary = `-- name: CreateSecretary :one
INSERT INTO "secretaries" ("name", "email", "password", "phone", "birthdate", "cpf", "cnpj")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING "id", "name", "email", "password", "phone", "birthdate", "cpf", "cnpj"
`

type CreateSecretaryParams struct {
	Name      string
	Email     string
	Password  string
	Phone     string
	Birthdate pgtype.Date
	Cpf       string
	Cnpj      pgtype.Text
}

func (q *Queries) CreateSecretary(ctx context.Context, arg CreateSecretaryParams) (Secretary, error) {
	row := q.db.QueryRow(ctx, createSecretary,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Phone,
		arg.Birthdate,
		arg.Cpf,
		arg.Cnpj,
	)
	var i Secretary
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
		&i.Cnpj,
	)
	return i, err
}

const deleteSecretaryByID = `-- name: DeleteSecretaryByID :exec
DELETE FROM "secretaries"
WHERE "id" = $1
`

func (q *Queries) DeleteSecretaryByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSecretaryByID, id)
	return err
}

const getSecretaryByEmail = `-- name: GetSecretaryByEmail :one
SELECT "id", "name", "email", "password", "phone", "birthdate", "cpf", "cnpj"
FROM "secretaries"
WHERE "email" = $1
LIMIT 1
`

func (q *Queries) GetSecretaryByEmail(ctx context.Context, email string) (Secretary, error) {
	row := q.db.QueryRow(ctx, getSecretaryByEmail, email)
	var i Secretary
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
		&i.Cnpj,
	)
	return i, err
}

const getSecretaryByID = `-- name: GetSecretaryByID :one
SELECT "id", "name", "email", "password", "phone", "birthdate", "cpf", "cnpj"
FROM "secretaries"
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) GetSecretaryByID(ctx context.Context, id uuid.UUID) (Secretary, error) {
	row := q.db.QueryRow(ctx, getSecretaryByID, id)
	var i Secretary
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
		&i.Cnpj,
	)
	return i, err
}

const listSecretaries = `-- name: ListSecretaries :many
SELECT "id", "name", "email", "password", "phone", "birthdate", "cpf", "cnpj"
FROM "secretaries"
WHERE true
  AND ($1::text = '' OR "name" ILIKE '%' || $1 || '%')
  AND ($2::text = '' OR "cpf" = $2)
  AND ($3::text = '' OR "phone" = $3)
LIMIT $4
OFFSET $5
`

type ListSecretariesParams struct {
	Column1 string
	Column2 string
	Column3 string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListSecretaries(ctx context.Context, arg ListSecretariesParams) ([]Secretary, error) {
	rows, err := q.db.Query(ctx, listSecretaries,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secretary
	for rows.Next() {
		var i Secretary
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Phone,
			&i.Birthdate,
			&i.Cpf,
			&i.Cnpj,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecretary = `-- name: UpdateSecretary :one
UPDATE "secretaries"
SET
  "name" = $1,
  "email" = $2,
  "password" = $3,
  "phone" = $4,
  "birthdate" = $5,
  "cpf" = $6,
  "cnpj" = $7
WHERE "id" = $8
RETURNING "id", "name", "email", "password", "phone", "birthdate", "cpf", "cnpj"
`

type UpdateSecretaryParams struct {
	Name      string
	Email     string
	Password  string
	Phone     string
	Birthdate pgtype.Date
	Cpf       string
	Cnpj      pgtype.Text
	ID        uuid.UUID
}

func (q *Queries) UpdateSecretary(ctx context.Context, arg UpdateSecretaryParams) (Secretary, error) {
	row := q.db.QueryRow(ctx, updateSecretary,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Phone,
		arg.Birthdate,
		arg.Cpf,
		arg.Cnpj,
		arg.ID,
	)
	var i Secretary
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
		&i.Cnpj,
	)
	return i, err
}
