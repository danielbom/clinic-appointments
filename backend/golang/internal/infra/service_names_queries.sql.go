// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: service_names_queries.sql

package infra

import (
	"context"

	"github.com/google/uuid"
)

const createServiceName = `-- name: CreateServiceName :one
INSERT INTO "service_names" ("name", "specialization_id")
VALUES ($1, $2)
RETURNING "id"
`

type CreateServiceNameParams struct {
	Name             string
	SpecializationID uuid.UUID
}

func (q *Queries) CreateServiceName(ctx context.Context, arg CreateServiceNameParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createServiceName, arg.Name, arg.SpecializationID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteServiceNameByID = `-- name: DeleteServiceNameByID :execrows
DELETE FROM "service_names"
WHERE "id" = $1
`

func (q *Queries) DeleteServiceNameByID(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteServiceNameByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getServiceNameByID = `-- name: GetServiceNameByID :one
SELECT "id", "name", "specialization_id"
FROM "service_names" 
WHERE "id" = $1
`

func (q *Queries) GetServiceNameByID(ctx context.Context, id uuid.UUID) (ServiceName, error) {
	row := q.db.QueryRow(ctx, getServiceNameByID, id)
	var i ServiceName
	err := row.Scan(&i.ID, &i.Name, &i.SpecializationID)
	return i, err
}

const getServiceNameByName = `-- name: GetServiceNameByName :one
SELECT "id", "name", "specialization_id"
FROM "service_names" 
WHERE "name" = $1
`

func (q *Queries) GetServiceNameByName(ctx context.Context, name string) (ServiceName, error) {
	row := q.db.QueryRow(ctx, getServiceNameByName, name)
	var i ServiceName
	err := row.Scan(&i.ID, &i.Name, &i.SpecializationID)
	return i, err
}

const listServiceNames = `-- name: ListServiceNames :many
SELECT "id", "name", "specialization_id"
FROM "service_names"
ORDER BY "name"
`

func (q *Queries) ListServiceNames(ctx context.Context) ([]ServiceName, error) {
	rows, err := q.db.Query(ctx, listServiceNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceName
	for rows.Next() {
		var i ServiceName
		if err := rows.Scan(&i.ID, &i.Name, &i.SpecializationID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceName = `-- name: UpdateServiceName :one
UPDATE "service_names"
SET
    "name" = $1
WHERE "id" = $2
RETURNING "id"
`

type UpdateServiceNameParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateServiceName(ctx context.Context, arg UpdateServiceNameParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateServiceName, arg.Name, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
