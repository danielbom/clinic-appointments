// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: specialist_hours_queries.sql

package infra

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSpecialistHour = `-- name: CreateSpecialistHour :one
INSERT INTO specialist_hours ("specialist_id", "weekday", "start_time", "end_time")
VALUES ($1, $2, $3, $4)
RETURNING "id"
`

type CreateSpecialistHourParams struct {
	SpecialistID uuid.UUID
	Weekday      int32
	StartTime    pgtype.Time
	EndTime      pgtype.Time
}

func (q *Queries) CreateSpecialistHour(ctx context.Context, arg CreateSpecialistHourParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSpecialistHour,
		arg.SpecialistID,
		arg.Weekday,
		arg.StartTime,
		arg.EndTime,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const listSpecialistHoursIntersecting = `-- name: ListSpecialistHoursIntersecting :many
SELECT "id", "specialist_id", "weekday", "start_time", "end_time"
FROM specialist_hours
WHERE "specialist_id" = $1
    AND "weekday" = $2
    AND (
        $3::time BETWEEN "start_time" AND "end_time"
        OR 
        $4::time BETWEEN "start_time" AND "end_time"
    )
ORDER BY "start_time" ASC
`

type ListSpecialistHoursIntersectingParams struct {
	SpecialistID uuid.UUID
	Weekday      int32
	StartTime    pgtype.Time
	EndTime      pgtype.Time
}

func (q *Queries) ListSpecialistHoursIntersecting(ctx context.Context, arg ListSpecialistHoursIntersectingParams) ([]SpecialistHour, error) {
	rows, err := q.db.Query(ctx, listSpecialistHoursIntersecting,
		arg.SpecialistID,
		arg.Weekday,
		arg.StartTime,
		arg.EndTime,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpecialistHour
	for rows.Next() {
		var i SpecialistHour
		if err := rows.Scan(
			&i.ID,
			&i.SpecialistID,
			&i.Weekday,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpecialistHourStartAndEndTime = `-- name: UpdateSpecialistHourStartAndEndTime :exec
UPDATE specialist_hours
SET "start_time" = $2, "end_time" = $3
WHERE "id" = $1
`

type UpdateSpecialistHourStartAndEndTimeParams struct {
	ID        uuid.UUID
	StartTime pgtype.Time
	EndTime   pgtype.Time
}

func (q *Queries) UpdateSpecialistHourStartAndEndTime(ctx context.Context, arg UpdateSpecialistHourStartAndEndTimeParams) error {
	_, err := q.db.Exec(ctx, updateSpecialistHourStartAndEndTime, arg.ID, arg.StartTime, arg.EndTime)
	return err
}
