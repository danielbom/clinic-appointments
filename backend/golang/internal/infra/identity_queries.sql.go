// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: identity_queries.sql

package infra

import (
	"context"

	"github.com/google/uuid"
)

const getIdentityByEmail = `-- name: GetIdentityByEmail :one
SELECT "id", "name", "email", "password", 'admin' as "role"
FROM "admins"
WHERE "admins"."email" = $1
UNION
SELECT "id", "name", "email", "password", 'secretary' as "role"
FROM "secretaries"
WHERE "secretaries"."email" = $1
LIMIT 1
`

type GetIdentityByEmailRow struct {
	ID       uuid.UUID
	Name     string
	Email    string
	Password string
	Role     string
}

func (q *Queries) GetIdentityByEmail(ctx context.Context, email string) (GetIdentityByEmailRow, error) {
	row := q.db.QueryRow(ctx, getIdentityByEmail, email)
	var i GetIdentityByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getIdentityByID = `-- name: GetIdentityByID :one
SELECT "id", "name", "email", "password", 'admin' as "role"
FROM "admins"
WHERE "admins"."id" = $1
UNION
SELECT "id", "name", "email", "password", 'secretary' as "role"
FROM "secretaries"
WHERE "secretaries"."id" = $1
LIMIT 1
`

type GetIdentityByIDRow struct {
	ID       uuid.UUID
	Name     string
	Email    string
	Password string
	Role     string
}

func (q *Queries) GetIdentityByID(ctx context.Context, id uuid.UUID) (GetIdentityByIDRow, error) {
	row := q.db.QueryRow(ctx, getIdentityByID, id)
	var i GetIdentityByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}
