// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: specialists_queries.sql

package infra

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countSpecialists = `-- name: CountSpecialists :one
SELECT COUNT("s"."id")
FROM "specialists" "s"
`

func (q *Queries) CountSpecialists(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSpecialists)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSpecialist = `-- name: CreateSpecialist :one
INSERT INTO specialists ("name", "email", "phone", "birthdate", "cpf", "cnpj")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING "id"
`

type CreateSpecialistParams struct {
	Name      string
	Email     string
	Phone     string
	Birthdate pgtype.Date
	Cpf       string
	Cnpj      pgtype.Text
}

func (q *Queries) CreateSpecialist(ctx context.Context, arg CreateSpecialistParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSpecialist,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Birthdate,
		arg.Cpf,
		arg.Cnpj,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteSpecialistByID = `-- name: DeleteSpecialistByID :execrows
DELETE FROM "specialists"
WHERE "id" = $1
`

func (q *Queries) DeleteSpecialistByID(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSpecialistByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getSpecialistByEmail = `-- name: GetSpecialistByEmail :one
SELECT "id", "name", "email", "phone", "birthdate", "cpf", "cnpj"
FROM "specialists"
WHERE "email" = $1
LIMIT 1
`

func (q *Queries) GetSpecialistByEmail(ctx context.Context, email string) (Specialist, error) {
	row := q.db.QueryRow(ctx, getSpecialistByEmail, email)
	var i Specialist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
		&i.Cnpj,
	)
	return i, err
}

const getSpecialistByID = `-- name: GetSpecialistByID :one
SELECT "id", "name", "email", "phone", "birthdate", "cpf", "cnpj"
FROM "specialists"
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) GetSpecialistByID(ctx context.Context, id uuid.UUID) (Specialist, error) {
	row := q.db.QueryRow(ctx, getSpecialistByID, id)
	var i Specialist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
		&i.Cnpj,
	)
	return i, err
}

const listServicesBySpecialistID = `-- name: ListServicesBySpecialistID :many
SELECT "s"."id",
    "sn"."specialization_id",
    "sn"."id" as "service_name_id",
    "sn"."name" as "service_name",
    "s"."price", "s"."duration"
FROM "services" "s"
JOIN "service_names" "sn" ON "sn"."id" = "s"."service_name_id"
WHERE "s"."specialist_id" = $1
`

type ListServicesBySpecialistIDRow struct {
	ID               uuid.UUID
	SpecializationID uuid.UUID
	ServiceNameID    uuid.UUID
	ServiceName      string
	Price            int32
	Duration         pgtype.Interval
}

func (q *Queries) ListServicesBySpecialistID(ctx context.Context, specialistID uuid.UUID) ([]ListServicesBySpecialistIDRow, error) {
	rows, err := q.db.Query(ctx, listServicesBySpecialistID, specialistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServicesBySpecialistIDRow
	for rows.Next() {
		var i ListServicesBySpecialistIDRow
		if err := rows.Scan(
			&i.ID,
			&i.SpecializationID,
			&i.ServiceNameID,
			&i.ServiceName,
			&i.Price,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecialists = `-- name: ListSpecialists :many
SELECT "id", "name", "email", "phone", "birthdate", "cpf", "cnpj"
FROM "specialists"
LIMIT $1
OFFSET $2
`

type ListSpecialistsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSpecialists(ctx context.Context, arg ListSpecialistsParams) ([]Specialist, error) {
	rows, err := q.db.Query(ctx, listSpecialists, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialist
	for rows.Next() {
		var i Specialist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Birthdate,
			&i.Cpf,
			&i.Cnpj,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecialistsByName = `-- name: ListSpecialistsByName :many
SELECT "id", "name", "email", "phone", "birthdate", "cpf", "cnpj"
FROM "specialists"
WHERE "name" ILIKE '%' || $1 || '%'
`

func (q *Queries) ListSpecialistsByName(ctx context.Context, dollar_1 pgtype.Text) ([]Specialist, error) {
	rows, err := q.db.Query(ctx, listSpecialistsByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialist
	for rows.Next() {
		var i Specialist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Birthdate,
			&i.Cpf,
			&i.Cnpj,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpecialist = `-- name: UpdateSpecialist :one
UPDATE "specialists"
SET 
  "name" = $1,
  "email" = $2,
  "phone" = $3,
  "birthdate" = $4,
  "cpf" = $5,
  "cnpj" = $6
WHERE "id" = $7
RETURNING "id", "name", "email", "phone", "birthdate", "cpf", "cnpj"
`

type UpdateSpecialistParams struct {
	Name      string
	Email     string
	Phone     string
	Birthdate pgtype.Date
	Cpf       string
	Cnpj      pgtype.Text
	ID        uuid.UUID
}

func (q *Queries) UpdateSpecialist(ctx context.Context, arg UpdateSpecialistParams) (Specialist, error) {
	row := q.db.QueryRow(ctx, updateSpecialist,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Birthdate,
		arg.Cpf,
		arg.Cnpj,
		arg.ID,
	)
	var i Specialist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
		&i.Cnpj,
	)
	return i, err
}
