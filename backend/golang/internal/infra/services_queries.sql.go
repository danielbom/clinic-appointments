// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: services_queries.sql

package infra

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createService = `-- name: CreateService :one
INSERT INTO services ("service_name_id", "specialist_id", "price", "duration")
VALUES ($1, $2, $3, $4)
RETURNING "id"
`

type CreateServiceParams struct {
	ServiceNameID uuid.UUID
	SpecialistID  uuid.UUID
	Price         int32
	Duration      pgtype.Interval
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createService,
		arg.ServiceNameID,
		arg.SpecialistID,
		arg.Price,
		arg.Duration,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteService = `-- name: DeleteService :execrows
DELETE FROM "services"
WHERE "id" = $1
`

func (q *Queries) DeleteService(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteService, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getService = `-- name: GetService :one
SELECT "id", "service_name_id", "specialist_id", "price", "duration"
FROM services
WHERE "service_name_id" = $1 AND "specialist_id" = $2
`

type GetServiceParams struct {
	ServiceNameID uuid.UUID
	SpecialistID  uuid.UUID
}

func (q *Queries) GetService(ctx context.Context, arg GetServiceParams) (Service, error) {
	row := q.db.QueryRow(ctx, getService, arg.ServiceNameID, arg.SpecialistID)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.ServiceNameID,
		&i.SpecialistID,
		&i.Price,
		&i.Duration,
	)
	return i, err
}

const getServiceByID = `-- name: GetServiceByID :one
SELECT "id", "service_name_id", "specialist_id", "price", "duration"
FROM services
WHERE "id" = $1
`

func (q *Queries) GetServiceByID(ctx context.Context, id uuid.UUID) (Service, error) {
	row := q.db.QueryRow(ctx, getServiceByID, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.ServiceNameID,
		&i.SpecialistID,
		&i.Price,
		&i.Duration,
	)
	return i, err
}

const updateService = `-- name: UpdateService :one
UPDATE "services" 
SET
    "price" = $1,
    "duration" = $2
WHERE "id" = $3
RETURNING "id"
`

type UpdateServiceParams struct {
	Price    int32
	Duration pgtype.Interval
	ID       uuid.UUID
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateService, arg.Price, arg.Duration, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
