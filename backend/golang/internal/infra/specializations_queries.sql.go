// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: specializations_queries.sql

package infra

import (
	"context"

	"github.com/google/uuid"
)

const createSpecialization = `-- name: CreateSpecialization :one
INSERT INTO "specializations" ("name")
VALUES ($1)
RETURNING "id"
`

func (q *Queries) CreateSpecialization(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSpecialization, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteSpecializationByID = `-- name: DeleteSpecializationByID :exec
DELETE FROM "specializations"
WHERE "id" = $1
`

func (q *Queries) DeleteSpecializationByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpecializationByID, id)
	return err
}

const getSpecializationByID = `-- name: GetSpecializationByID :one
SELECT "id", "name"
FROM "specializations" 
WHERE "id" = $1
`

func (q *Queries) GetSpecializationByID(ctx context.Context, id uuid.UUID) (Specialization, error) {
	row := q.db.QueryRow(ctx, getSpecializationByID, id)
	var i Specialization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getSpecializationByName = `-- name: GetSpecializationByName :one
SELECT "id", "name"
FROM "specializations" 
WHERE "name" = $1
`

func (q *Queries) GetSpecializationByName(ctx context.Context, name string) (Specialization, error) {
	row := q.db.QueryRow(ctx, getSpecializationByName, name)
	var i Specialization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listSpecializations = `-- name: ListSpecializations :many
SELECT "id", "name"
FROM "specializations"
ORDER BY "name"
`

func (q *Queries) ListSpecializations(ctx context.Context) ([]Specialization, error) {
	rows, err := q.db.Query(ctx, listSpecializations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialization
	for rows.Next() {
		var i Specialization
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecializationsBySpecialistID = `-- name: ListSpecializationsBySpecialistID :many
SELECT "sp"."id", "sp"."name"
FROM "specializations" "sp"
WHERE "sp"."id" IN (
	SELECT "sn"."specialization_id" 
	FROM "services" "s" 
	JOIN "service_names" "sn" ON "sn"."id" = "s"."service_name_id"
	WHERE "s"."specialist_id" = $1
)
`

func (q *Queries) ListSpecializationsBySpecialistID(ctx context.Context, specialistID uuid.UUID) ([]Specialization, error) {
	rows, err := q.db.Query(ctx, listSpecializationsBySpecialistID, specialistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialization
	for rows.Next() {
		var i Specialization
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpecialization = `-- name: UpdateSpecialization :one
UPDATE "specializations"
SET 
	"name" = $1
WHERE "id" = $2
RETURNING "id"
`

type UpdateSpecializationParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateSpecialization(ctx context.Context, arg UpdateSpecializationParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateSpecialization, arg.Name, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
