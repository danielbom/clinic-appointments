// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: services_enriched_queries.sql

package infra

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countServicesEnriched = `-- name: CountServicesEnriched :one
SELECT COUNT("s"."id")
FROM "services" "s"
JOIN "specialists" "sp" ON "s"."specialist_id" = "sp"."id"
JOIN "service_names" "sn" ON "s"."service_name_id" = "sn"."id"
JOIN "specializations" "sz" ON "sn"."specialization_id" = "sz"."id"
WHERE true
   AND ($1::text = '' OR LOWER(unaccent("sp"."name")) LIKE '%' || LOWER(unaccent($1)) || '%')
   AND ($2::text = '' OR LOWER(unaccent("sz"."name")) LIKE '%' || LOWER(unaccent($2)) || '%')
   AND ($3::text = '' OR LOWER(unaccent("sn"."name")) LIKE '%' || LOWER(unaccent($3)) || '%')
`

type CountServicesEnrichedParams struct {
	Column1 string
	Column2 string
	Column3 string
}

func (q *Queries) CountServicesEnriched(ctx context.Context, arg CountServicesEnrichedParams) (int64, error) {
	row := q.db.QueryRow(ctx, countServicesEnriched, arg.Column1, arg.Column2, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listServicesEnriched = `-- name: ListServicesEnriched :many
SELECT "s"."id", "s"."price", "s"."duration",
       "s"."specialist_id", "sp"."name" as "specialist_name",
       "s"."service_name_id", "sn"."name" as "service_name",
       "sn"."specialization_id", "sz"."name" as "specialization_name"
FROM "services" "s"
JOIN "specialists" "sp" ON "s"."specialist_id" = "sp"."id"
JOIN "service_names" "sn" ON "s"."service_name_id" = "sn"."id"
JOIN "specializations" "sz" ON "sn"."specialization_id" = "sz"."id"
WHERE true
   AND ($3::text = '' OR LOWER(unaccent("sp"."name")) LIKE '%' || LOWER(unaccent($3)) || '%')
   AND ($4::text = '' OR LOWER(unaccent("sz"."name")) LIKE '%' || LOWER(unaccent($4)) || '%')
   AND ($5::text = '' OR LOWER(unaccent("sn"."name")) LIKE '%' || LOWER(unaccent($5)) || '%')
LIMIT $1
OFFSET $2
`

type ListServicesEnrichedParams struct {
	Limit   int32
	Offset  int32
	Column3 string
	Column4 string
	Column5 string
}

type ListServicesEnrichedRow struct {
	ID                 uuid.UUID
	Price              int32
	Duration           pgtype.Interval
	SpecialistID       uuid.UUID
	SpecialistName     string
	ServiceNameID      uuid.UUID
	ServiceName        string
	SpecializationID   uuid.UUID
	SpecializationName string
}

func (q *Queries) ListServicesEnriched(ctx context.Context, arg ListServicesEnrichedParams) ([]ListServicesEnrichedRow, error) {
	rows, err := q.db.Query(ctx, listServicesEnriched,
		arg.Limit,
		arg.Offset,
		arg.Column3,
		arg.Column4,
		arg.Column5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServicesEnrichedRow
	for rows.Next() {
		var i ListServicesEnrichedRow
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Duration,
			&i.SpecialistID,
			&i.SpecialistName,
			&i.ServiceNameID,
			&i.ServiceName,
			&i.SpecializationID,
			&i.SpecializationName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
