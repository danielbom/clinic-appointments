// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: customers_queries.sql

package infra

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countCustomers = `-- name: CountCustomers :one
SELECT COUNT(id)
FROM "customers"
WHERE true
  AND ($1::text = '' OR "name" ILIKE '%' || $1 || '%')
  AND ($2::text = '' OR "cpf" = $2)
  AND ($3::text = '' OR "phone" = $3)
`

type CountCustomersParams struct {
	Column1 string
	Column2 string
	Column3 string
}

func (q *Queries) CountCustomers(ctx context.Context, arg CountCustomersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countCustomers, arg.Column1, arg.Column2, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO "customers" ("name", "email", "phone", "birthdate", "cpf")
VALUES ($1, $2, $3, $4, $5)
RETURNING "id", "name", "email", "phone", "birthdate", "cpf"
`

type CreateCustomerParams struct {
	Name      string
	Email     pgtype.Text
	Phone     string
	Birthdate pgtype.Date
	Cpf       string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Birthdate,
		arg.Cpf,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
	)
	return i, err
}

const deleteCustomerByID = `-- name: DeleteCustomerByID :execrows
DELETE FROM "customers"
WHERE "id" = $1
`

func (q *Queries) DeleteCustomerByID(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCustomerByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT "id", "name", "email", "phone", "birthdate", "cpf"
FROM "customers"
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
	)
	return i, err
}

const getCustomerByPhone = `-- name: GetCustomerByPhone :one
SELECT "id", "name", "email", "phone", "birthdate", "cpf"
FROM "customers"
WHERE "phone" = $1
LIMIT 1
`

func (q *Queries) GetCustomerByPhone(ctx context.Context, phone string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByPhone, phone)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT "id", "name", "email", "phone", "birthdate", "cpf"
FROM "customers"
WHERE true
  AND ($1::text = '' OR "name" ILIKE '%' || $1 || '%')
  AND ($2::text = '' OR "cpf" = $2)
  AND ($3::text = '' OR "phone" = $3)
LIMIT $4
OFFSET $5
`

type ListCustomersParams struct {
	Column1 string
	Column2 string
	Column3 string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Birthdate,
			&i.Cpf,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE "customers"
SET
  "name" = $1,
  "email" = $2,
  "phone" = $3,
  "birthdate" = $4,
  "cpf" = $5
WHERE "id" = $6
RETURNING "id", "name", "email", "phone", "birthdate", "cpf"
`

type UpdateCustomerParams struct {
	Name      string
	Email     pgtype.Text
	Phone     string
	Birthdate pgtype.Date
	Cpf       string
	ID        uuid.UUID
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Birthdate,
		arg.Cpf,
		arg.ID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Birthdate,
		&i.Cpf,
	)
	return i, err
}
